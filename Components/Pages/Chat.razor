@page "/chat"
@using ChatIADesktop.Modelos
@using ChatIADesktop.Servicos
@using ChatIADesktop.Utilitarios
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.WebUtilities
@inject IServicoOllama ServicoOllama
@inject IAnalisadorSentimento AnalisadorSentimento
@inject IExplicadorTermos ExplicadorTermos
@inject IProcessadorArquivos ProcessadorArquivos
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Chat com Ollama</PageTitle>

<div class="flex flex-col h-full">
    <div class="flex-grow overflow-auto" id="mensagensContainer">
        @if (Mensagens.Count == 0)
        {
            <div class="flex items-center justify-center h-full">
                <p class="text-gray-500">As mensagens aparecerão aqui...</p>
            </div>
        }
        else
        {
            @foreach (var mensagem in Mensagens)
            {
                <div class="@(mensagem.EhUsuario ? "bg-[#343541]" : "bg-[#444654]") border-b border-gray-700">
                    <div class="max-w-3xl mx-auto py-6 px-4">
                        <div class="flex items-start gap-4">
                            @if (mensagem.EhUsuario)
                            {
                                <div class="w-8 h-8 rounded-full bg-gray-500 flex items-center justify-center text-white">
                                    <i class="fa fa-user"></i>
                                </div>
                            }
                            else if (mensagem.EhIA)
                            {
                                <div class="w-8 h-8 rounded-full bg-green-600 flex items-center justify-center text-white">
                                    <i class="fa fa-robot"></i>
                                </div>
                            }
                            else if (mensagem.EhSistema)
                            {
                                <div class="w-8 h-8 rounded-full bg-yellow-500 flex items-center justify-center text-white">
                                    <i class="fa fa-exclamation-triangle"></i>
                                </div>
                            }
                            else if (mensagem.EhArquivo)
                            {
                                <div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white">
                                    <i class="fa fa-file"></i>
                                </div>
                            }

                            <div class="flex-1 text-gray-300">
                                @if (mensagem.EhArquivo)
                                {
                                    <div class="mb-2 text-blue-300 text-sm">
                                        <i class="fa fa-file mr-1"></i>
                                        <span>@mensagem.NomeArquivo</span>
                                    </div>
                                }
                                <div class="message-content whitespace-pre-wrap">
                                    @((MarkupString)FormatarMensagem(mensagem.Conteudo))
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (Processando)
        {
            <div class="bg-[#444654] border-b border-gray-700">
                <div class="max-w-3xl mx-auto py-6 px-4">
                    <div class="flex items-start gap-4">
                        <div class="w-8 h-8 rounded-full bg-green-600 flex items-center justify-center text-white">
                            <i class="fa fa-robot"></i>
                        </div>
                        <div class="flex-1">
                            <div class="typing-dots">
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="border-t border-gray-700 px-4 py-4">
        <div class="max-w-3xl mx-auto">
            <div class="relative">
                <form @onsubmit="EnviarMensagem" class="flex items-center">
                    <div class="relative flex-grow">
                        <textarea 
                            @bind="MensagemAtual" 
                            @bind:event="oninput"
                            @onkeydown="ManipularTecla"
                            class="w-full rounded-md bg-[#40414f] text-white border border-gray-700 p-3 pr-12 resize-none focus:outline-none focus:ring-1 focus:ring-[#10a37f]"
                            rows="1"
                            placeholder="Envie uma mensagem..."
                            disabled="@Processando">
                        </textarea>
                        <div class="absolute right-3 bottom-3">
                            <label class="cursor-pointer text-gray-400 hover:text-white">
                                <i class="fa fa-paperclip"></i>
                                <InputFile OnChange="CarregarArquivo" class="hidden" accept=".pdf,.txt" />
                            </label>
                        </div>
                    </div>
                    <button type="submit" 
                            class="ml-2 p-2 rounded-md bg-[#10a37f] hover:bg-[#0d8a6c] text-white disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled="@(Processando || string.IsNullOrWhiteSpace(MensagemAtual))">
                        <i class="fa fa-paper-plane"></i>
                    </button>
                </form>
                <div class="text-xs text-gray-500 mt-1 text-center">
                    Modelo atual: @ModeloAtual | Comandos: <span class="text-green-500">@@sentimento</span> <span class="text-blue-500">@@ajuda.ai</span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<MensagemChat> Mensagens { get; set; } = new List<MensagemChat>();
    private string MensagemAtual { get; set; } = string.Empty;
    private string ModeloAtual { get; set; } = "Carregando...";
    private bool Processando { get; set; } = false;
    
    private readonly Regex ComandoAjudaRegex = new Regex(@"@ajuda\.ai\s+(.+)$", RegexOptions.IgnoreCase);
    private readonly Regex ComandoSentimentoRegex = new Regex(@"@sentimento\s+(.+)$", RegexOptions.IgnoreCase);
    
    protected override async Task OnInitializedAsync()
    {
        // Carrega o modelo atual
        try
        {
            ModeloAtual = await ServicoOllama.ObterModeloAtualAsync();
            
            // Verifica se há um prompt na URL
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("prompt", out var promptParam))
            {
                MensagemAtual = promptParam.ToString();
                await Task.Delay(100); // Pequeno delay para garantir que a UI esteja pronta
                await EnviarMensagem();
            }
            else
            {
                // Adiciona mensagem de boas-vindas
                Mensagens.Add(new MensagemChat
                {
                    Conteudo = $"Olá! Sou um assistente baseado no modelo {ModeloAtual}. Como posso ajudar você hoje?",
                    Tipo = TipoMensagem.IA
                });
            }
        }
        catch (Exception ex)
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"Erro ao conectar ao serviço Ollama: {ex.Message}",
                Tipo = TipoMensagem.Sistema
            });
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Rola para o final das mensagens
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "mensagensContainer");
    }
    
    private async Task ManipularTecla(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await EnviarMensagem();
        }
    }
    
    private async Task EnviarMensagem()
    {
        if (string.IsNullOrWhiteSpace(MensagemAtual) || Processando)
            return;
            
        var mensagemUsuario = MensagemAtual.Trim();
        MensagemAtual = string.Empty;
        Processando = true;
        
        try
        {
            // Adiciona a mensagem do usuário à lista
            Mensagens.Add(new MensagemChat
            {
                Conteudo = mensagemUsuario,
                Tipo = TipoMensagem.Usuario
            });
            
            StateHasChanged();
            
            // Verifica se é um comando especial
            if (await ProcessarComandoEspecial(mensagemUsuario))
            {
                Processando = false;
                return;
            }
            
            // Envia para o Ollama
            var resposta = await ServicoOllama.ProcessarMensagemAsync(mensagemUsuario);
            
            // Adiciona a resposta à lista
            Mensagens.Add(new MensagemChat
            {
                Conteudo = resposta,
                Tipo = TipoMensagem.IA
            });
        }
        catch (Exception ex)
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"Erro: {ex.Message}",
                Tipo = TipoMensagem.Sistema
            });
        }
        finally
        {
            Processando = false;
            StateHasChanged();
        }
    }
    
    private async Task<bool> ProcessarComandoEspecial(string mensagem)
    {
        // Comando @ajuda.ai
        var matchAjuda = ComandoAjudaRegex.Match(mensagem);
        if (matchAjuda.Success && matchAjuda.Groups.Count > 1)
        {
            var termo = matchAjuda.Groups[1].Value.Trim();
            await ProcessarComandoAjuda(termo);
            return true;
        }
        
        // Comando @sentimento
        var matchSentimento = ComandoSentimentoRegex.Match(mensagem);
        if (matchSentimento.Success && matchSentimento.Groups.Count > 1)
        {
            var texto = matchSentimento.Groups[1].Value.Trim();
            await ProcessarComandoSentimento(texto);
            return true;
        }
        
        return false;
    }
    
    private async Task ProcessarComandoAjuda(string termo)
    {
        try
        {
            var resultado = await ExplicadorTermos.ExplicarTermoAsync(termo);
            
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"**Explicação de '{termo}':**\n\n{resultado.Resultado}",
                Tipo = TipoMensagem.IA
            });
        }
        catch (Exception ex)
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"Erro ao processar comando @ajuda.ai: {ex.Message}",
                Tipo = TipoMensagem.Sistema
            });
        }
    }
    
    private async Task ProcessarComandoSentimento(string texto)
    {
        try
        {
            var resultado = await AnalisadorSentimento.AnalisarSentimentoAsync(texto);
            
            var icone = resultado.Resultado.ToLower() switch
            {
                "positivo" => "😊",
                "negativo" => "😔",
                _ => "😐"
            };
            
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"**Análise de Sentimento:**\n\nO texto tem um sentimento {resultado.Resultado} {icone}",
                Tipo = TipoMensagem.IA
            });
        }
        catch (Exception ex)
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"Erro ao processar comando @sentimento: {ex.Message}",
                Tipo = TipoMensagem.Sistema
            });
        }
    }
    
    private async Task CarregarArquivo(InputFileChangeEventArgs e)
    {
        if (e.File.Size > 5 * 1024 * 1024) // 5MB limite
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = "Erro: O arquivo excede o tamanho máximo de 5MB.",
                Tipo = TipoMensagem.Sistema
            });
            return;
        }
        
        if (!ProcessadorArquivos.ArquivoSuportado(e.File.Name))
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = "Erro: Formato de arquivo não suportado. Apenas PDF e TXT são permitidos.",
                Tipo = TipoMensagem.Sistema
            });
            return;
        }
        
        try
        {
            Processando = true;
            StateHasChanged();
            
            using var stream = e.File.OpenReadStream();
            var textoExtraido = await ProcessadorArquivos.ProcessarArquivoAsync(stream, e.File.Name);
            var resumo = await ProcessadorArquivos.GerarResumoAsync(textoExtraido);
            
            Mensagens.Add(new MensagemChat
            {
                Conteudo = resumo,
                Tipo = TipoMensagem.Arquivo,
                NomeArquivo = e.File.Name
            });
            
            // Gera uma resposta da IA sobre o conteúdo do arquivo
            var resposta = await ServicoOllama.ProcessarMensagemAsync(
                $"Foi enviado um arquivo chamado {e.File.Name} com o seguinte conteúdo: {resumo}. " +
                "Por favor, descreva brevemente do que se trata este conteúdo."
            );
            
            Mensagens.Add(new MensagemChat
            {
                Conteudo = resposta,
                Tipo = TipoMensagem.IA
            });
        }
        catch (Exception ex)
        {
            Mensagens.Add(new MensagemChat
            {
                Conteudo = $"Erro ao processar arquivo: {ex.Message}",
                Tipo = TipoMensagem.Sistema
            });
        }
        finally
        {
            Processando = false;
            StateHasChanged();
        }
    }
    
    private string FormatarMensagem(string conteudo)
    {
        if (string.IsNullOrEmpty(conteudo)) return string.Empty;

        // Escape HTML chars to prevent XSS
        var resultado = HtmlEscape(conteudo);
        
        // Processar blocos de código
        resultado = ProcessarBlocosDeCodigo(resultado);
        
        // Processar negrito (** **)
        resultado = Regex.Replace(resultado, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        
        // Processar itálico (* *)
        resultado = Regex.Replace(resultado, @"\*(.*?)\*", "<em>$1</em>");
        
        // Substituir quebras de linha por <br>
        resultado = resultado.Replace("\n", "<br />");
        
        return resultado;
    }
    
    private string HtmlEscape(string text)
    {
        return text
            .Replace("&", "&amp;")
            .Replace("<", "&lt;")
            .Replace(">", "&gt;")
            .Replace("\"", "&quot;")
            .Replace("'", "&#39;");
    }
    
    private string ProcessarBlocosDeCodigo(string texto)
    {
        // Processa blocos de código com syntax highlighting
        var pattern = @"```(.*?)\n(.*?)```";
        var matches = Regex.Matches(texto, pattern, RegexOptions.Singleline);
        
        // Se não houver blocos de código, retorna o texto original
        if (matches.Count == 0) return texto;
        
        var resultado = texto;
        
        // Processa cada bloco de código
        foreach (Match match in matches.Cast<Match>().Reverse())
        {
            var linguagem = match.Groups[1].Value.Trim();
            var codigo = match.Groups[2].Value;
            
            // Formata o bloco de código
            var blocoFormatado = $"<pre><code class=\"language-{linguagem}\">{codigo}</code></pre>";
            
            // Substitui o bloco original pelo formatado
            resultado = resultado.Substring(0, match.Index) + blocoFormatado + resultado.Substring(match.Index + match.Length);
        }
        
        return resultado;
    }
}